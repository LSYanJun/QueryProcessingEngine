/*
 * File - "sample.cpp"
 * Desc - This is the sample program generated by our engine.
 *
 * Steps to run this program : 
 *  1. Log in to PostgreSQL server (ssh [username]@postgres.cs.stevens.edu).
 *  2. In the program (L48), modify [dbname], [username], [password] to
 *     yours ([dbname] is the same as your [username] by default).
 *  3. Preprocessor - $ ecpg -I /usr/include/postgresql sample.pgc
 *  4. Compile      - $ g++ -c -I /usr/include/postgresql/ sample.c
 *  5. Link         - $ g++ -L /usr/include/postgresql/ sample.o -lecpg -o sample
 *  6. Execute      - $ ./sample
 */

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <iostream>

using namespace std;

EXEC SQL BEGIN DECLARE SECTION;
struct  Sal{
	char	*cust;
	char	*prod;
	short    dd;
	short    mm;
	short	 yy;
	char	*state;
	long	 quant;
};
struct Sal sale_rec;
EXEC SQL END DECLARE SECTION;
EXEC SQL INCLUDE sqlca;

vector<struct Sal> abc;
//----------------------------------------------------------------------
// FUNCTION PROTOTYPE declaration
//----------------------------------------------------------------------
void	output_record(); //output records to the console

//----------------------------------------------------------------------
int main(int argc, char* argv[])
//----------------------------------------------------------------------
{
   //----------------------------------------------------------------------
   // DATABASE CONNECTION
   //----------------------------------------------------------------------
   EXEC SQL CONNECT TO cs562@localhost:5432 USER postgres IDENTIFIED BY cs562;
   EXEC SQL WHENEVER sqlerror sqlprint;

   //----------------------------------------------------------------------
   // PRINT TITLE
   //----------------------------------------------------------------------   
   cout << " CUST  | PROD    | DAY | MON | YEAR | STATE | QUANT \n";
   cout << "-------+---------+-----+-----+------+-------+-------\n";
   
   //----------------------------------------------------------------------
   // READ RECORDS
   //----------------------------------------------------------------------
   EXEC SQL DECLARE mycursor CURSOR FOR SELECT * FROM sales;
   EXEC SQL SET TRANSACTION read only;
   // Open cursor
   EXEC SQL OPEN mycursor;
   // Fetch Data
   EXEC SQL FETCH FROM mycursor INTO :sale_rec; //fetch the first row
   while (sqlca.sqlcode == 0) {
      output_record();
      abc.push_back(sale_rec);
      EXEC SQL FETCH FROM mycursor INTO :sale_rec; //fetch the rest rows
   }
   // Close cursor
printf(" %-5s |",abc[497].cust);
printf(" %-7s |",sale_rec.prod); 
cout<<"|"<<abc[497].dd<<"|"<<abc[497].mm<<"|"<<abc[497].yy<<"|"<<abc[497].quant<<endl;
   EXEC SQL CLOSE mycursor;

   return 0;
}

//----------------------------------------------------------------------
void	output_record()  //set of output
//----------------------------------------------------------------------
{
	printf(" %-5s |",sale_rec.cust);   // Customer
	printf(" %-7s |",sale_rec.prod);   // Product
	printf("  %2d |",sale_rec.dd);     // Day
	printf("  %2d |",sale_rec.mm);     // Month
	printf(" %4d |",sale_rec.yy);      // Year
	printf(" %-5s |",sale_rec.state);  // State
	printf(" %5d \n",sale_rec.quant);  // Quantity
}
