//--first--
/*
 * File - "sample.pgc"
 * Desc - This is the program generated by our engine.
 *
 * Steps to run this program : 
 *  1. Log in to PostgreSQL server (ssh [username]@postgres.cs.stevens.edu).
 *  2. In the program (L48), modify [dbname], [username], [password] to
 *     yours ([dbname] is the same as your [username] by default).
 *  3. Preprocessor - $ ecpg -I /usr/include/postgresql sample.pgc
 *  4. Compile      - $ gcc -c -I /usr/include/postgresql/ sample.c
 *  5. Link         - $ gcc -L /usr/include/postgresql/ sample.o -lecpg -o sample
 *  6. Execute      - $ ./sample
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

EXEC SQL BEGIN DECLARE SECTION;
struct {
	char	*cust;
	char	*prod;
	short    dd;
	short    mm;
	short	 yy;
	char	*state;
	long	 quant;
}	sale_rec;
EXEC SQL END DECLARE SECTION;
EXEC SQL INCLUDE sqlca;

//--end first--
struct {
	bool flag;
	char cust[21];
	char prod[21];
	short mm;
	long sum_1_quant;
	short count_1_quant;
	long sum_2_quant;
	short count_2_quant;
	long sum_3_quant;
} MFS[500];

//--second--
//----------------------------------------------------------------------
// FUNCTION PROTOTYPE declaration
//----------------------------------------------------------------------

void	initialMFS();
unsigned int	hashFunc(char*);

//----------------------------------------------------------------------
int main(int argc, char* argv[])
//----------------------------------------------------------------------
{
   int i;
   initialMFS();
   //----------------------------------------------------------------------
   // DATABASE CONNECTION
   //----------------------------------------------------------------------
   EXEC SQL CONNECT TO cs562@localhost:5432 USER postgres IDENTIFIED BY cs562;
   EXEC SQL WHENEVER sqlerror sqlprint;

//--end second--
   //optimization relative aggrigate functions  assigned: Gong Cheng
   for(i = 0; i < 2; i++)
   {
	   // Open cursor
	   EXEC SQL OPEN mycursor;
	   // Fetch Data
	   EXEC SQL FETCH FROM mycursor INTO :sale_rec; //fetch the first row
	   while (sqlca.sqlcode == 0) {
		unsigned int hash = hashFunc();
		while(strcmp(MFS[hash].cust,sale_rec.cust)!=0)
		{
			hash=(hash+1)%500;
		}
		if(strcmp(sale_rec.state,"NY")==0)
		{
			MFS[hash].sum_1_quant+=sale_rec.quant;
			MFS[hash].count_1_quant++;
		}
		else if(strcmp(sale_rec.state,"CT")==0)
		{
			MFS[hash].sum_2_quant+=sale_rec.quant;
			MFS[hash].count_2_quant++;
		}
		else if(strcmp(sale_rec.state,"NJ")==0)
		{
			MFS[hash].sum_3_quant+=sale_rec.quant;
			MFS[hash].count_3_quant++;
		}
	     EXEC SQL FETCH FROM mycursor INTO :sale_rec; //fetch the rest rows
	   }
	   // Close cursor
	   EXEC SQL CLOSE mycursor;
	   //----------------------------------------------------------------------
   }

//--third--
   return 0;
}

void	initialMFS()
{
	int i;
	for(i = 0; i < 500; i++)
	{
		MFS[i].flag=0;
	}
}

//--end third--
