/*
 * File - "engine.cpp"
 * Desc - This is the EMF query process engine program for our project.
 *
 * Steps to run this program : 
 *  1. Compile and link		-$ g++ engine.cpp
 *  2. Execute			-$ ./a.out <[input file] >[output file] (i.e. ./a.out <EMFquery.txt >program.pgc)
 *  3. Run program		-read the instructions in the program file
 */

#include <iostream>
#include <string>
#include <vector>
#include <sstream>

using namespace std;

string s,n,v,f,o,g;
vector<string> vecO;
vector<string> S,V,F,G;
int N;
vector< vector<string> > VECO;
string t;

void readOperand();
void writeProgram();
void operandProcess();

int main()
{
	readOperand();
	operandProcess();
	writeProgram();
}

void readOperand()
{
	getline(cin,t);
	if(t=="S")
	{
		getline(cin,s);
		if(s=="n") t=s;
		else getline(cin,t);
	}
	if(t=="n")
	{
		getline(cin,n);
		if(v=="V") t=n;
		else getline(cin,t);
	}
	if(t=="V")
	{
		getline(cin,v);
		if(n=="F") t=v;
		else getline(cin,t);
	}
	if(t=="F")
	{
		getline(cin,f);
		if(f=="o") t=f;
		else getline(cin,t);
	}
	if(t=="o")
	{
		getline(cin,o);
		while(o!="G")
		{
			vecO.push_back(o);
			getline(cin,o);
		}
		t=o;
	}
	if(t=="G")
	{
		getline(cin,g);
	}
}

void operandProcess()
{
	stringstream ss;
	string temp;
	ss << s;
	while(!ss.eof())
	{
		ss >> temp;
		if(temp[temp.size()-1]==',') temp.erase(temp.size()-1,1);
		S.push_back(temp);
	}
	for(int i = 0; i < n.length(); i++)
	{
		if(i!=0) N *= 10;
		else N = 0;
		N += n[i]-48;
	}
	ss.clear();
	ss << v;
	while(!ss.eof())
	{
		ss >> temp;
		if(temp[temp.size()-1]==',') temp.erase(temp.size()-1,1);
		V.push_back(temp);
	}
	ss.clear();
	ss << f;
	while(!ss.eof())
	{
		ss >> temp;
		if(temp[temp.size()-1]==',') temp.erase(temp.size()-1,1);
		string tempSum, tempCount;
		if(temp.find("sum")!=-1) tempSum=temp;
		else if(temp.find("count")!=-1) tempCount=temp;
		else
		{
			tempSum=temp.replace(temp.find("avg"),3,"sum");
			tempCount=temp.replace(temp.find("sum"),3,"count");
		}
		if(tempSum!="")
		{
			int i;
			for(i = 0; i < F.size(); i++)
			if(F[i]==tempSum) break;
			if(i==F.size()) F.push_back(tempSum);
		}
		if(tempCount!="")
		{
			int i;
			for(i = 0; i < F.size(); i++)
			if(F[i]==tempCount) break;
			if(i==F.size()) F.push_back(tempCount);
		}
	}
	ss.clear();
	ss << g;
	while(!ss.eof())
	{
		ss >> temp;
		if(temp[temp.size()-1]==',') temp.erase(temp.size()-1,1);
		G.push_back(temp);
	}
}

void writeFirstPart();
void writeSecondPart();
void writeThirdPart();
void writeMFS();
void writeGroupingAttr();//assigned: Zhe Xu
void writeCompleteTable(); //assigned: Gong Cheng
void writeOutput(); //assigned: Yanjun Wu
void writeHashFunc(); //assigned: Lingzhi Yuan

void writeProgram()
{
	writeFirstPart();
	writeMFS();
	writeSecondPart();
	writeGroupingAttr();//assigned: Zhe Xu
	writeCompleteTable(); //assigned: Gong Cheng
	writeOutput(); //assigned: Yanjun Wu
	writeThirdPart();
	writeHashFunc(); //assigned: Lingzhi Yuan
}

void writeFirstPart()
{
	cout << "//--first--" << endl <<
	"/*" << endl <<
	" * File - \"sample.pgc\"" << endl <<
	" * Desc - This is the sample program generated by our engine." << endl <<
	" *" << endl <<
	" * Steps to run this program : " << endl <<
	" *  1. Log in to PostgreSQL server (ssh [username]@postgres.cs.stevens.edu)." << endl <<
	" *  2. In the program (L48), modify [dbname], [username], [password] to" << endl <<
	" *     yours ([dbname] is the same as your [username] by default)." << endl <<
	" *  3. Preprocessor - $ ecpg -I /usr/include/postgresql sample.pgc" << endl <<
	" *  4. Compile      - $ gcc -c -I /usr/include/postgresql/ sample.c" << endl <<
	" *  5. Link         - $ gcc -L /usr/include/postgresql/ sample.o -lecpg -o sample" << endl <<
	" *  6. Execute      - $ ./sample" << endl <<
	" */" << endl <<
	endl <<
	"#include <stdio.h>" << endl <<
	"#include <stdlib.h>" << endl <<
	"#include <string.h>" << endl <<
	endl <<
	"EXEC SQL BEGIN DECLARE SECTION;" << endl <<
	"struct {" << endl <<
	"	char	*cust;" << endl <<
	"	char	*prod;" << endl <<
	"	short    dd;" << endl <<
	"	short    mm;" << endl <<
	"	short	 yy;" << endl <<
	"	char	*state;" << endl <<
	"	long	 quant;" << endl <<
	"}	sale_rec;" << endl <<
	"EXEC SQL END DECLARE SECTION;" << endl <<
	"EXEC SQL INCLUDE sqlca;" << endl <<
	endl<<"//--end first--"<<endl;
}

void writeSecondPart()
{
	cout << "//--second--" << endl <<
	"//----------------------------------------------------------------------" << endl <<
	"// FUNCTION PROTOTYPE declaration" << endl <<
	"//----------------------------------------------------------------------" << endl << endl <<
	"void	initialMFS();" << endl <<
	"unsigned int	hashFunc(char*);" << endl << endl <<
	"//----------------------------------------------------------------------" << endl <<
	"int main(int argc, char* argv[])" << endl <<
	"//----------------------------------------------------------------------" << endl <<
	"{" << endl <<
	"   initialMFS();" << endl <<
	"   //----------------------------------------------------------------------" << endl <<
	"   // DATABASE CONNECTION" << endl <<
	"   //----------------------------------------------------------------------" << endl <<
	"   EXEC SQL CONNECT TO cs562@localhost:5432 USER postgres IDENTIFIED BY cs562;" << endl <<
	"   EXEC SQL WHENEVER sqlerror sqlprint;" << endl <<
	endl<<"//--end second--"<<endl;
}

void writeThirdPart()
{
	cout << "//--third--" << endl <<
	"   return 0;" << endl <<
	"}" << endl << endl <<	
	"void	initialMFS()" << endl <<
	"{" << endl <<
	"	int i;" << endl <<
	"	for(i = 0; i < 500; i++)" << endl <<
	"	{" << endl <<
	"		MFS[i].flag=0;" << endl <<
	"	}" << endl <<
	"}" << endl <<
	endl<<"//--end third--"<<endl;
}

void writeMFS()
{
	string attrType(string attr);
	cout <<
	"struct {" << endl <<
	"	bool flag;" << endl;
	for(int i = 0; i < V.size(); i++)
	{
		string type = attrType(V[i]);
		if(type.find("char")!=-1)
			cout << "	char " << V[i] << type.substr(4) << ";" << endl;
		else
			cout << "	" <<type << " " << V[i] << ";" << endl;
	}
	for(int i = 0; i < F.size(); i++)
	{
		if(F[i].find("sum")!=-1) cout << "	long " << F[i] << ";" << endl;
		else cout << "	short " << F[i] << ";" << endl;
	}
	cout << "} MFS[500];" << endl << endl;
}

void writePrintTitle()
{
	cout <<
	"   //----------------------------------------------------------------------" << endl <<
	"   // PRINT TITLE" << endl <<
	"   //---------------------------------------------------------------------- " << endl <<  
	"   printf(\" CUST  | avg(x.sale) | avg(y.sale) | avg(z.sale)  \\n\");";
	for(int i = 0; i < S.size() - 1; i++)
	{
		
	}

 cout <<
	"   printf(\"-------+-------------+-------------+------------\\n\");" << endl <<
	endl;
}

string attrType(string attr)
{
	if(attr=="cust" || attr=="prod") return "char[21]";
	else if(attr=="quant") return "long";
	else if(attr=="state") return "char[3]";
	else return "short";
}


void writeGroupingAttr()//assigned: Zhe Xu
{

}

void writeCompleteTable() //assigned: Gong Cheng
{

}

void writeOutput() //assigned: Yanjun Wu
{

}

void writeHashFunc() //assigned: Lingzhi Yuan
{

}


